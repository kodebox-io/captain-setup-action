name: "Setup"

inputs:
  cache-venv:
    default: "false"
  cache-yarn:
    default: "false"
  cache-db:
    default: "false"
  github-token:
    default: ""
  db-snapshot-artifact-run-id:
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: kodebox-io/captain-setup-action/setup-node@dev
      with:
        install-zuzu-dependencies: ${{ inputs.cache-yarn }}

    - name: Setup Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        architecture: "x64"

    - name: Setup Pipenv
      shell: bash
      run: |
        pip install pipenv
        python --version ; pip --version ; pipenv --version

    - name: Cache .venv
      if: inputs.cache-venv == 'true'
      id: cache-venv
      uses: actions/cache@v4
      with:
        path: ./.venv
        key: venv-${{ runner.os }}-${{ hashFiles('./Pipfile.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Check .venv
      id: check-venv
      shell: bash
      run: |
        if (pipenv run python3 -c "import django"); then
          echo "result=true" >> $GITHUB_OUTPUT
        else
          echo "result=false" >> $GITHUB_OUTPUT
          # 일주일이 지난 PR은 GitHub에 의해 .venv 캐시가 삭제되므로 재설치가 필요하다.
          # https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy
          rm -rf .venv
        fi

    - name: zz deps_django
      if: inputs.cache-venv == 'true' && (steps.cache-venv.outputs.cache-hit != 'true' || steps.check-venv.outputs.result != 'true')
      shell: bash
      run: |
        ./zz deps_django

    - name: Download DB snapshot artifact
      if: inputs.cache-db == 'true'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ inputs.github-token }}
        repository: kodebox-io/captain
        run-id: ${{ inputs.db-snapshot-artifact-run-id }}

    - name: Restore DB from the snapshot
      if: inputs.cache-db == 'true'
      shell: bash
      run: |
        docker-compose -f ./docker/testing.yaml up -d db
        for _ in $(seq 3); do yarn retry -t 1000 --max-timeout=60000 ./zz db_isready; sleep 1; done

        docker cp db-snapshot/dump.gz captain_db:dump.gz
        docker exec captain_db /bin/bash -c "createdb -U postgres --template=template0 test_postgres"
        docker exec captain_db /bin/bash -c "pg_restore -U postgres -d test_postgres dump.gz"
        docker exec captain_db /bin/bash -c "pg_restore -U postgres -d postgres dump.gz"
