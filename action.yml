name: "Setup"
inputs:
  cache-venv:
    default: false
  cache-yarn:
    default: false
  cache-db:
    default: false
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        architecture: "x64"

    - name: Setup Pipenv
      shell: bash
      run: |
        pip install pipenv
        python --version ; pip --version ; pipenv --version

    - name: Cache .venv
      if: inputs.cache-venv == 'true'
      uses: actions/cache@v3
      id: cache-venv
      env:
        cache-name: cache-venv
      with:
        path: ./.venv
        key: v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./Pipfile.lock') }}-${{ github.event.number }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./Pipfile.lock') }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Check .venv
      id: check-venv
      shell: bash
      run: |
        if (pipenv run python3 -c "import django"); then
          echo "result=true" >> $GITHUB_OUTPUT
        else
          echo "result=false" >> $GITHUB_OUTPUT
          # 일주일이 지난 PR은 GitHub에 의해 .venv 캐시가 삭제되므로 재설치가 필요하다.
          # https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy
          rm -rf .venv
        fi

    - name: zz deps_django
      if: inputs.cache-venv == 'true' && (steps.cache-venv.outputs.cache-hit != 'true' || steps.check-venv.outputs.result != 'true')
      shell: bash
      run: |
        ./zz deps_django

    - name: Setup Node 14
      uses: actions/setup-node@v3
      with:
        node-version: "14"
        cache: "yarn"

    - name: Run Yarn Install
      if: inputs.cache-yarn == 'true'
      shell: bash
      run: yarn install

    - name: Initialize Lerna
      if: steps.cache-yarn.outputs.cache-hit == 'true'
      shell: bash
      run: |
        yarn lerna bootstrap
        yarn lerna exec --parallel yarn link

    - name: Cache DB migration datas 
      if: inputs.cache-db == 'true'
      uses: actions/cache@v3
      id: cache-db
      env:
        cache-name: cache-db
      with:
        path: ./db-volume.tar
        key: v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('zuzu/db/migrations/0*') }}

    - name: Extract the compressed DB migration datas
      if: inputs.cache-db == 'true' && steps.cache-db.outputs.cache-hit == 'true'
      shell: bash
      run: |
        sudo tar -xvf db-volume.tar

    - name: Compress the DB migration datas
      if: inputs.cache-db == 'true' && steps.cache-db.outputs.cache-hit != 'true'
      shell: bash
      run: |
        docker-compose -f ./docker/testing.yaml up -d db
        yarn global add retry-cli
        for _ in $(seq 3); do npx retry -t 1000 --max-timeout=60000 ./zz db_isready; sleep 1; done

        ./zz migrate --no-input
        ./zz backupdb postgres test_postgres

        # actions/cache에서는 'docker' usergroup이 소유하고 있는 파일에 접근할 수 없어, 부득이하게 Docker volume의 압축파일을 생성하여 캐시한다.
        # See https://github.com/actions/cache/issues/31
        sudo tar -cvf db-volume.tar ./db-volume

